name: Mochi.PhysX
on:
  push:
    # This prevents tag pushes from triggering this workflow
    branches: ['*']
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        default: ""
      will_publish_packages:
        description: "Publish packages?"
        default: "false"
env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  ContinuousIntegrationBuild: true
  # This URL will be added to the restore sources if it isn't the official NuGet.org
  # (This is mainly intended to allow using the NuGet.org test servers to test CI in forks.)
  CiNuGetApiUrl: ${{secrets.NUGET_API_URL}}
jobs:
  # =====================================================================================================================================================================
  # Build PhysX
  # =====================================================================================================================================================================
  build-physx:
    strategy:
      fail-fast: false
      matrix:
        rid: [win-x64]
        configuration:
          - name: Debug
            id: debug
          - name: Checked
            id: checked
          - name: Profile
            id: profile
          - name: Release
            id: release
        include:
          - rid: win-x64
            name: Windows x64
            os: windows-latest
            build-command: ./build.cmd
            physx-install-path: external/PhysX/physx/install/Mochi.PhysX.Windows.x64
            physx-compiler-path: external/PhysX/physx/compiler/mochi-physx-win-x64
    name: PhysX ${{matrix.name}} ${{matrix.configuration.name}}
    runs-on: ${{matrix.os}}
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # ----------------------------------------------------------------------- Setup Python
      - name: Setup Python 3.8
        if: matrix.platform.skip-tool-install != true
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # ----------------------------------------------------------------------- Get PhysX revision
      - name: Get PhysX revision
        id: physx
        run: python .github/workflows/get-physx-revision.py

      # ----------------------------------------------------------------------- Build PhysX
      - name: Load cached PhysX build outputs
        id: cached-physx
        uses: actions/cache@v2
        with:
          #key: physx-${{matrix.rid}}-${{matrix.configuration.id}}-${{steps.physx.outputs.revision}}-${{hashFiles('build.*', 'tooling/*.cmd', 'tooling/*.sh', 'Mochi.PhysX.Modifications/**')}}
          key: physx-${{matrix.rid}}-${{matrix.configuration.id}}-${{steps.physx.outputs.revision}}-nohashfortesting2
          path: physx-${{matrix.rid}}-${{matrix.configuration.id}}.tar.gz

      - name: Build PhysX
        if: steps.cached-physx.outputs.cache-hit != 'true'
        run: ${{matrix.build-command}} ${{matrix.configuration.id}}

      # ----------------------------------------------------------------------- Upload artifacts
      - name: Collect PhysX binaries
        if: steps.cached-physx.outputs.cache-hit != 'true'
        run: tar -cvf physx-${{matrix.rid}}-${{matrix.configuration.id}}.tar ${{matrix.physx-install-path}}/bin

      # Due to the way PhysX builds and links its internal dependencies, the PDBs it emits don't include some internal object files
      # However, the linker will be able to automagically find the debug info for these objects from these PDBs so we include them in our archive
      # (Not including these causes LNK4099 to be spammed for all of these objects when Mochi.PhysX.Native is built and presumably causes these objects to be missing debug info.)
      - name: Collect extra PhysX PDBs
        if: steps.cached-physx.outputs.cache-hit != 'true' && runner.os == 'Windows'
        run: tar -rvf physx-${{matrix.rid}}-${{matrix.configuration.id}}.tar ${{matrix.physx-compiler-path}}/sdk_source_bin/${{matrix.configuration.id}}/*.pdb

      # We only use the headers from the release build (they should match between all of them)
      # (These are the headers we actually use to generate the bindings.)
      - name: Collect PhysX headers
        if: steps.cached-physx.outputs.cache-hit != 'true' && matrix.configuration.id == 'release'
        run: |
          tar -rvf physx-${{matrix.rid}}-${{matrix.configuration.id}}.tar ${{matrix.physx-install-path}}/include
          tar -rvf physx-${{matrix.rid}}-${{matrix.configuration.id}}.tar ${{matrix.physx-install-path}}/source

      - name: Compress PhysX build artifacts
        if: steps.cached-physx.outputs.cache-hit != 'true'
        run: tar -cvzf physx-${{matrix.rid}}-${{matrix.configuration.id}}.tar.gz physx-${{matrix.rid}}-${{matrix.configuration.id}}.tar

      - name: Upload PhysX build artifacts
        uses: actions/upload-artifact@v2
        with:
          #name: physx-${{matrix.rid}}-${{matrix.configuration.id}}
          name: physx-${{matrix.rid}}
          path: physx-${{matrix.rid}}-${{matrix.configuration.id}}.tar.gz
          if-no-files-found: error

  # =====================================================================================================================================================================
  # Build Mochi.PhysX
  # =====================================================================================================================================================================
  build-mochi-physx:
    needs: build-physx
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows x64
            os: windows-latest
            rid: win-x64
            build-command: ./build.cmd
    name: Mochi.PhysX ${{matrix.name}}
    runs-on: ${{matrix.os}}
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        # We intentionally don't checkout submodules here, Mochi.PhysX.Generator should only use outputs from building PhysX
        uses: actions/checkout@v2
        #TODO: Actually we need them for Biohazrd still. Remove this once we switch to NuGet packages for it.
        with:
          submodules: recursive
      
      # ----------------------------------------------------------------------- Setup .NET
      - name: Setup .NET
        if: matrix.platform.skip-tool-install != true
        uses: actions/setup-dotnet@v1
        with:
          # We need both the .NET 5 and .NET 6 SDKs because we currently use C# 10 while targeting .NET 5
          dotnet-version: |
            5.0.x
            6.0.x
      
      # ----------------------------------------------------------------------- Download PhysX builds
      - name: Download PhysX ${{matrix.name}} builds
        uses: actions/download-artifact@v2
        with:
          name: physx-${{matrix.rid}}
#      - name: Download PhysX ${{matrix.name}} debug build
#        uses: actions/download-artifact@v2
#        with:
#          name: physx-${{matrix.rid}}-debug
#      - name: Download PhysX ${{matrix.name}} checked build
#        uses: actions/download-artifact@v2
#        with:
#          name: physx-${{matrix.rid}}-checked
#      - name: Download PhysX ${{matrix.name}} profile build
#        uses: actions/download-artifact@v2
#        with:
#          name: physx-${{matrix.rid}}-profile
#      - name: Download PhysX ${{matrix.name}} release build
#        uses: actions/download-artifact@v2
#        with:
#          name: physx-${{matrix.rid}}-release
      
      - name: Extract PhysX Builds
        run: |
          tar --keep-old-files -xf physx-${{matrix.rid}}-debug.tar.gz
          tar --keep-old-files -xf physx-${{matrix.rid}}-checked.tar.gz
          tar --keep-old-files -xf physx-${{matrix.rid}}-profile.tar.gz
          tar --keep-old-files -xf physx-${{matrix.rid}}-release.tar.gz

      # ----------------------------------------------------------------------- Configure build
      - name: Configure build
        run: python .github/workflows/configure-build.py
        env:
          github_event_name: ${{github.event_name}}
          github_ref: ${{github.ref}}
          github_run_number: ${{github.run_number}}
          release_version: ${{github.event.release.tag_name}}
          workflow_dispatch_version: ${{github.event.inputs.version}}
          workflow_dispatch_will_publish_packages: ${{github.event.inputs.will_publish_packages}}

      # ----------------------------------------------------------------------- Generate Mochi.PhysX
      - name: Restore Mochi.PhysX.Generator
        run: dotnet restore Mochi.PhysX.Generator
      
      - name: Build Mochi.PhysX.Generator
        run: dotnet build Mochi.PhysX.Generator --configuration Release
      
      - name: Generate Mochi.PhysX
        run: ${{matrix.build-command}} generate
