name: Mochi.PhysX
on:
  push:
    # This prevents tag pushes from triggering this workflow
    branches: ['*']
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        default: ""
      will_publish_packages:
        description: "Publish packages?"
        default: "false"
env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  ContinuousIntegrationBuild: true
  # This URL will be added to the restore sources if it isn't the official NuGet.org
  # (This is mainly intended to allow using the NuGet.org test servers to test CI in forks.)
  CiNuGetApiUrl: ${{secrets.NUGET_API_URL}}
jobs:
  # =====================================================================================================================================================================
  # Build PhysX
  # =====================================================================================================================================================================
  build-physx:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Windows x64
            os: windows-latest
            rid: win-x64
            build-command: ./build.cmd
            physx-install-path: external/PhysX/physx/install/Mochi.PhysX.Windows.x64/
        configuration: ['Debug', 'Checked', 'Profile', 'Release']
    name: PhysX ${{matrix.platform.name}} ${{matrix.configuration}}
    runs-on: ${{matrix.platform.os}}
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      
      # ----------------------------------------------------------------------- Cache
      #TODO

      # ----------------------------------------------------------------------- Build PhysX
      - name: Build PhysX
        run: ${{matrix.platform.build-command}} ${{matrix.configuration}}

      # ----------------------------------------------------------------------- Upload Artifacts
      # For release builds we collect everything (the binaries and the headers)
      # For everything else we collect just the binaries
      # We collect the headers for release since the headers in the `install` directory are what we actually use to generate
      - name: Collect PhysX Build Artifacts
        if: ${{matrix.configuration}} != 'Release'
        run: tar -czvf physx-${{matrix.rid}}-${{matrix.configuration}}.tar.gz ${{matrix.physx-install-path}}bin/
      - name: Collect PhysX Build Artifacts (Release)
        if: ${{matrix.configuration}} == 'Release'
        run: tar -czvf physx-${{matrix.rid}}-${{matrix.configuration}}.tar.gz ${{matrix.physx-install-path}}

      - name: Upload PhysX Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: physx-${{matrix.rid}}-${{matrix.configuration}}
          path: physx-${{matrix.rid}}-${{matrix.configuration}}.tar.gz
          if-no-files-found: error

  # =====================================================================================================================================================================
  # Build Mochi.PhysX
  # =====================================================================================================================================================================
  build-mochi-physx:
    needs: build-physx
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows x64
            os: windows-latest
            rid: win-x64
            build-command: ./build.cmd
    name: Mochi.PhysX ${{matrix.name}}
    runs-on: ${{matrix.os}}
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        # We intentionally don't checkout submodules here, Mochi.PhysX.Generator should only use outputs from building PhysX
        uses: actions/checkout@v2
      
      # ----------------------------------------------------------------------- Setup .NET
      - name: Setup .NET
        if: matrix.platform.skip-tool-install != true
        uses: actions/setup-dotnet@v1
        with:
          # We need both the .NET 5 and .NET 6 SDKs because we currently use C# 10 while targeting .NET 5
          dotnet-version: |
            5.0.x
            6.0.x
      
      # ----------------------------------------------------------------------- Download PhysX Builds
      - name: Download PhysX ${{matrix.name}} Debug Build
        uses: actions/download-artifact@v2
        with:
          name: physx-${{matrix.rid}}-Debug
      - name: Download PhysX ${{matrix.name}} Checked Build
        uses: actions/download-artifact@v2
        with:
          name: physx-${{matrix.rid}}-Checked
      - name: Download PhysX ${{matrix.name}} Profile Build
        uses: actions/download-artifact@v2
        with:
          name: physx-${{matrix.rid}}-Profile
      - name: Download PhysX ${{matrix.name}} Release Build
        uses: actions/download-artifact@v2
        with:
          name: physx-${{matrix.rid}}-Release
      
      - name: Extract PhysX Builds
        run: tar --keep-old-files -xf physx-${{matrix.rid}}-*.tar.gz

      # ----------------------------------------------------------------------- Generate Mochi.PhysX
      - name: Restore Mochi.PhysX.Generator
        run: dotnet restore Mochi.PhysX.Generator
      
      - name: Build Mochi.PhysX.Generator
        run: dotnet build Mochi.PhysX.Generator --configuration Release
      
      - name: Generate Mochi.PhysX
        run: ${{matrix.build-command}} generate
